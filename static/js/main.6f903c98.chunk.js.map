{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","None","sortField","setSortField","isReversedField","setIsReversedField","visibleGoods","goods","prepsredGoods","sort","good1","good2","SortByAlphabet","localeCompare","SortByLength","length","reverse","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,qCAAAA,E,8BAAAA,E,SAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,MAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8CH,oBAAS,GAAvD,mBAAOI,EAAP,KAAwBC,EAAxB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,gBAEPI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAML,EAASe,eACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAMd,EAASiB,aACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,EAEZ,IAGCX,GACFI,EAAcQ,UAGTR,CACR,CAKsBS,CACnBnB,EACA,CAAEI,YAAWE,oBAQf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYlB,IAAcL,EAASe,iBAErCS,QAAS,kBAAMlB,EAAaN,EAASe,eAA5B,EALX,iCAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYlB,IAAcL,EAASiB,eAErCO,QAAS,kBAAMlB,EAAaN,EAASiB,aAA5B,EALX,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAahB,IAEfiB,QAAS,WACPhB,GAAoBD,EACrB,EAPH,sBAYEF,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QA5CI,WACZlB,EAAaN,EAASI,MACtBI,GAAmB,EACpB,EAsCO,sBAUJ,6BACIC,EAAagB,KAAI,SAAAC,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,EADH,QAQ9B,EC1HDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,Q","file":"static/js/main.6f903c98.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SortByAlphabet = 'Sort alphabetically',\n  SortByLength = 'Sort by length',\n  None = '',\n}\n\ninterface FilterParam {\n  sortField: SortType;\n  isReversedField: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { sortField, isReversedField }: FilterParam,\n) {\n  const prepsredGoods = [...goods];\n\n  if (sortField) {\n    prepsredGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case (SortType.SortByAlphabet):\n          return good1.localeCompare(good2);\n\n        case (SortType.SortByLength):\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversedField) {\n    prepsredGoods.reverse();\n  }\n\n  return prepsredGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.None);\n  const [isReversedField, setIsReversedField] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, isReversedField },\n  );\n\n  const reset = () => {\n    setSortField(SortType.None);\n    setIsReversedField(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortType.SortByAlphabet,\n          })}\n          onClick={() => setSortField(SortType.SortByAlphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortType.SortByLength,\n          })}\n          onClick={() => setSortField(SortType.SortByLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversedField,\n          })}\n          onClick={() => {\n            setIsReversedField(!isReversedField);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversedField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        { visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}